<template>
  <div id="stations_list">
    <!-- <h2>{{stationsData[0].href}}</h2> -->
    <!-- <StationCard :station_name="stationsData[0].href" :bike_availability="stationsData[0].href" :slots_availability="stationsData[0].href"></StationCard>
     -->

    <!-- search bar de la homepage -->
    <!-- 
<div class="gallery-options">
      <input id="search_bar_homepage" type="text" v-model="search" placeholder="Search a city">
    </div> -->

    <!-- <h3> "Somme" bikes | "Somme" bike stations</h3> -->

    <!-- <p>{{ sum }}</p> -->

    <!-- <h2>{{search}}</h2> -->
    <!-- <button id="search_button" onclick="getMoreStations()">Search</button> -->

    <div class="gallery-options">
      <input id="filter_search_bar_homepage" type="text" v-model="search" placeholder="Search a station in New York" />
      <button v-if="search" class="button_remove_search" @click="cleanSearch">X</button>

      <label for="stations-sort"> Sort by : </label>
      <select v-model="stationsSortType" id="station-sort">
        <option value="AZName">Station names from A to Z</option>
        <option value="ZAName">Station names from Z to A</option>
        <option value="MLBikes">Number of bikes - Most to Least</option>
        <option value="LMBikes">Number of bikes - Least to Most</option>
      </select>
    </div>

    <div id="stations_cards">
      <!-- <StationCard :station_name="stationsData[0].href"></StationCard>
     <StationCard v-for="station in stationsData" :key="station.id">{{station.id}}{{station.station_name}}</StationCard> -->
      <StationCard v-for="station in stationsOrganizedData" :key="station.id" :station_name="station.name"
        :bike_availability="station.free_bikes" :slots_availability="station.empty_slots">
      </StationCard>

      <!-- <ul id="example-1">
        <li v-for="station in stations" :key="station.id">
          {{ station.href }}
        </li>
      </ul> -->
    </div>

    <button id="more_button" v-on:click="seeMore">See more</button>
    <!-- <StationCard>{{totalVuePackages}}</StationCard>
    <StationCard>{{totalVuePackages}}</StationCard> -->
  </div>
</template>

<script>
  import StationCard from "../objects/station_card.vue";
  //import search from '../objects/search_bar.vue'
  import getStationsData from "../../services/api/stationsRepository.js";
  // import returnStations from '../../services/api/stationsRepository.js'
  //import seeMoreStations from '../../services/api/stationsRepository.js'

  //getStationsData();

  export default {
    name: "StationsList",
    components: {
      StationCard,
    },
    props: {
      msg: String,
    },

    watch: {
      search: function (newSearch) {
        localStorage.setItem("search", newSearch)
      },
      stationsSortType: function (newStationsSortType) {
        localStorage.setItem("stationsSortType", newStationsSortType)
      }
    },

    computed: {
      // sum: function() {
      //   //console.log(this.stationsData[0].free_bikes)
      // 	// return this.stationsData[0].free_bikes;
      //   return this.free_bikes;
      // }

      //computed: {

      stationsOrganizedData: function () {
        const field = ["AZName", "ZAName"].includes(this.stationsSortType) ?
          "name" :
          "free_bikes";
        const reversed = ["ZAName", "LMBikes"].includes(this.stationsSortType);


        //this.stationsData.free_bikes = this.free_bikes.toString();
        console.log(this.free_bikes)

        const filterFunc = (a) => a.name.toLowerCase().includes(this.search.toLowerCase());
        let data = this.stationsData.filter(filterFunc);

        const comparator = (a, b) => a[field].localeCompare(b[field], undefined, {
          numeric: 'true'
        });

        /*const comparator = function (a, b) {
        if (typeof field === "string") {
          return a[field].localeCompare(b[field]);
        } else {
          console.log(a < b)
          return a < b;

        }
      };
*/
        data = data.sort(comparator);

        if (reversed) data = data.reverse();
        return data;
      },
    },

    // a = a.toString();
    // b = b.toString();
    //if(field == "name"){

    // }
    //}else{
    //const comparator = (a, b) => a[field].localeCompare(b[field])
    //}

    //const comparator = (a, b) => a[field].localeCompare(b[field], undefined, {numeric: 'true'});

    //   stationsOrganizedData: function() {
    // 	const field = ["AZName", "ZAName"].includes(this.stationsSortType) ? "name" : "free_bikes"
    // 	const reversed = ["ZAName", "LMBikes"].includes(this.stationsSortType) ? -1 : 1
    // 	return this.stationsData
    // 			.filter((a) => a.name.toLowerCase().includes(this.search.toLowerCase()))
    // 			.sort((a, b) => a[field].localeCompare(b[field]) * reversed, undefined, {numeric: true})
    // }

    //},

    data() {
      return {
        stationsData: [],
        search: localStorage.getItem("search") || "",
        stationsSortType: localStorage.getItem("stationsSortType") || "AZName"
      };
    },
    created: function () {
      this.retrieveStationsData();
    },
    methods: {
      async retrieveStationsData() {
        this.stationsData = await getStationsData();
      },

      cleanSearch: function () {
        this.search = "";
      },

      //   seeMore : function() {
      // 	this.stationsData =  seeMoreStations(70);
      // },
      /*
      seeMore : function(event) {
			  this.stationsData = await returnStations(data, 0, 36, 70)
		}
    */
    },

    /*
  ,
  
  created() {
  // GET request using fetch with error handling
  fetch("http://api.citybik.es/v2/networks/")
    .then(async response => {
      const data = await response.json();
      console.log(data)

      // check for error response
      if (!response.ok) {
        // get error message from body or default to response statusText
        const error = (data && data.message) || response.statusText;
        return Promise.reject(error);
      }

      this.totalVuePackages = data.total;
      //console.log(this.totalVuePackages[1][4]);
      console.log(data.networks[0].href)
      
    })
    .catch(error => {
      this.errorMessage = error;
      console.error("There was an error!", error);
    });
    
}
*/
  };

  // getStationsData();
  //console.log(getStationsData(0));
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
  /* CSS DES TEXTES */
  h2 {
    font-size: 10vh;
    align-content: center;
    position: absolute;
    margin-top: 6vh;
    font-family: "Alumni Sans", sans-serif;
  }

  h3 {
    font-size: 5vh;
    align-content: center;
    color: darkgray;
    position: absolute;
    margin-top: 1vh;
    font-family: "Alumni Sans", sans-serif;
  }

  /* CSS DES STATIONS */
  #stations_list {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    position: relative;
    width: 88vw;
    margin-left: 6vw;
  }

  #stations_cards {
    margin-top: 5%;
    display: flex;
    /*justify-content: space-around;*/
    flex-wrap: wrap;
    position: relative;
    justify-self: center;
  }

  button {
    /* //background-color: #ff8c6d; */
    cursor: pointer;
    background: rgb(104, 43, 174);
    background: linear-gradient(140deg,
        rgba(104, 43, 174, 1) 0%,
        rgba(149, 0, 255, 1) 80%,
        rgba(198, 117, 255, 1) 100%);
    width: 8vw;
    height: 6vh;
    margin: 1vw;
    border-radius: 2vw;
    box-shadow: 2px 2px 10px rgb(0 0 0 / 0.2);
    font-size: 1.2vw;
    color: white;
    border: 0;
    /*font-weight: 200;*/
  }

  /* CSS DE INPUT */
  /* 
  #search_bar_homepage {
    width: 40vw;
    height: 5vh;
    border-radius: 2vw;
    background-color: rgba(238, 238, 238, 0.863);
    border: 0;

    padding-left: 2vw;
  } */

  button {
    /* //background-color: #ff8c6d; */
    cursor: pointer;
    background: rgb(104, 43, 174);
    background: linear-gradient(140deg,
        rgba(104, 43, 174, 1) 0%,
        rgba(149, 0, 255, 1) 80%,
        rgba(198, 117, 255, 1) 100%);
    width: 6vw;
    height: 6vh;
    margin: 1vw;
    border-radius: 2vw;
    box-shadow: 2px 2px 10px rgb(0 0 0 / 0.2);
    font-size: 1.2vw;
    color: white;
    border: 0;
    /*font-weight: 200;*/
  }

  button:hover {
    background-color: aliceblue;
  }

  input[type="text"],
  ::placeholder {
    font-family: "Alumni sans", sans-serif;
    font-size: 1.6vw;
    color: rgb(80, 80, 80);
  }

  #filter_search_bar_homepage {
    width: 30vw;
    height: 5vh;
    border-radius: 2vw;
    background-color: rgba(238, 238, 238, 0.863);
    border: 0;
    padding-left: 2vw;
  }

  .gallery-options {
    justify-content: space-around;
    margin-left: 4vw;
    margin-right: 4vw;
    margin-top: 6vh;
  }

  input {
    margin-left: 2vw;
    margin-right: 0vw;
  }

  select {
    margin-left: 0vw;
    margin-right: 4vw;
    font-family: "Alumni sans", sans-serif;
    font-size: 1.6vw;
    color: rgb(80, 80, 80);
  }

  label {
    font-family: "Alumni sans", sans-serif;
    font-size: 1.6vw;
    color: rgb(80, 80, 80);
    margin-left: 8vw;
  }

  #more_button {
    width: 15vh;
  }

  .button_remove_search {
    width: 2vw;
    height: 4vh;
    margin-left: 1vw;
    margin-top: 0.5vh;
    position: absolute;
  }
</style>